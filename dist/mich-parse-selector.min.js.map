{"version":3,"file":"mich-parse-selector.min.js","sources":["../index.js"],"sourcesContent":["/*!\n * mich-parse-selector <https://github.com/tunnckoCore/mich-parse-selector>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Copyright (c) Titus Wormer <tituswormer@gmail.com> (http://wooorm.com)\n * Released under the MIT license.\n */\n\n/**\n * > Parse a simple CSS selector like `p.foo#hero.btn-large.btn` into\n * a [HAST](https://github.com/syntax-tree/hast) node, which is a specification\n * for the Html (or Hypertext) Abstract Syntax Tree.\n * If \"tag name\" is omitted it defaults to `div`.\n *\n * **Example**\n *\n * ```js\n * const parseSelector = require('mich-parse-selector')\n *\n * const divNode = parseSelector('.bar')\n * const node = parseSelector('p.foo#hero.btn-large.btn')\n *\n * console.log(divNode)\n * // => {\n * //  type: 'element',\n * //  tagName: 'div',\n * //  properties: { className: [ 'bar' ] },\n * //  children: []\n * // }\n *\n * console.log(node)\n * // => {\n * //  type: 'element',\n * //  tagName: 'p',\n * //  properties: { id: 'hero', className: [ 'foo', 'btn-large', 'btn' ] },\n * //  children: []\n * // }\n * ```\n *\n * @name   michParseSelector\n * @param  {String} `selector` a css selector\n * @return {Object} a HAST-compliant node object\n * @api public\n */\n\nmodule.exports = function parse (selector) {\n  var type\n  var lastIndex\n\n  var index = 0\n  var className = []\n\n  var node = {\n    type: 'element',\n    tagName: 'div',\n    properties: {},\n    children: []\n  }\n\n  selector = selector || ''\n\n  while (index <= selector.length) {\n    var ch = selector[index++]\n\n    if (!ch || ch === '.' || ch === '#') {\n      var value = selector.slice(lastIndex, index - 1)\n\n      if (value) {\n        if (type === '.') {\n          className.push(value)\n        } else if (type === '#') {\n          node.properties.id = value\n        } else {\n          node.tagName = value\n        }\n      }\n\n      lastIndex = index\n      type = ch\n    }\n  }\n\n  if (className.length) {\n    node.properties.className = className\n  }\n\n  return node\n}\n"],"names":["selector","type","lastIndex","index","className","node","tagName","properties","children","length","ch","value","slice","push","id"],"mappings":"gLA6CA,MAAiB,SAAgBA,GAC/B,GAAIC,GACAC,EAEAC,EAAQ,EACRC,KAEAC,GACFJ,KAAM,UACNK,QAAS,MACTC,cACAC,YAKF,KAFAR,EAAWA,GAAY,GAEhBG,GAASH,EAASS,QAAQ,CAC/B,GAAIC,GAAKV,EAASG,IAElB,KAAKO,GAAa,MAAPA,GAAqB,MAAPA,EAAY,CACnC,GAAIC,GAAQX,EAASY,MAAMV,EAAWC,EAAQ,EAE1CQ,KACW,MAATV,EACFG,EAAUS,KAAKF,GACG,MAATV,EACTI,EAAKE,WAAWO,GAAKH,EAErBN,EAAKC,QAAUK,GAInBT,EAAYC,EACZF,EAAOS,GAQX,MAJIN,GAAUK,SACZJ,EAAKE,WAAWH,UAAYA,GAGvBC"}